---
- hosts: all
  become: true
  tags: [ base ]

  tasks:
    - name: Run pacstrap
      command: "pacstrap /mnt {{ pacstrap_packages | join(' ') }}"

    - name: Check whether yay is already installed
      register: yay_exists
      tags: [ aur ]
      stat:
        path: /usr/bin/yay

    # - name: Cloning the yay repository
    #   tags: [ aur ]
    #   when: not yay_exists.stat.exists
    #   command: arch-chroot /mnt git clone https://aur.archlinux.org/yay.git /tmp/yay

    # - name: Installing yay
    #   tags: [ aur ]
    #   when: not yay_exists.stat.exists
    #   command: arch-chroot /mnt "cd /tmp/yay && makepkg -si"

    # - name: Removing the yay repository
    #   tags: [ aur ]
    #   when: not yay_exists.stat.exists
    #   file:
    #     path: /mnt/tmp/yay
    #     state: absent

    - name: Notify
      command: wall Base packages installed

    - name: Restrict reflector to only FR mirrors
      lineinfile:
        insertafter: \# --country
        line: --country "France"
        path: /mnt/etc/xdg/reflector/reflector.conf

    - name: Grab boot UUID
      tags: [ grub ]
      command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_name }}'
      register: boot_uuid
      changed_when: false

    - name: Grab root UUID
      tags: [ grub ]
      command: blkid -s UUID -o value /dev/mapper/root
      register: root_uuid
      changed_when: false

    - name: Grab luks UUID
      tags: [ grub ]
      command: "blkid -s UUID -o value {{ install_drive }}{{ root_partition_name }}"
      register: luks_uuid
      changed_when: false

    - name: Create fstab
      tags: [ grub ]
      block:
        - name: Generate fstab
          command: genfstab -U /mnt >> /mnt/etc/fstab

        - name: Add root volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            opts: defaults
            state: present

    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime

    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc

    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - { regex: 'en_US\.UTF-8 UTF-8', line: 'en_US.UTF-8 UTF-8'}
            - { regex: 'fr_FR\.UTF-8 UTF-8', line: 'fr_FR.UTF-8 UTF-8'}

        - name: Generate locale.conf
          command: arch-chroot /mnt locale-gen

        - name: Create locale.conf
          copy:
            content: 'LANG=fr_FR.UTF-8'
            dest: /mnt/etc/locale.conf

    - name: Set console keymap
      copy:
        content: 'KEYMAP=fr-pc'
        dest: /mnt/etc/vconsole.conf

    - name: Set hostname
      copy:
        content: '{{ inventory_hostname }}'
        dest: /mnt/etc/hostname

    - name: Configure hosts
      template:
        src: templates/hosts.j2
        dest: /mnt/etc/hosts
        mode: 0644

    - name: Enable wanted services
      command: "arch-chroot /mnt systemctl enable {{ init_services_to_enable | join(' ') }}"

    - name: Notify
      command: wall Standard setup done

    - name: Grab root UUID
      tags: [ grub ]
      command: blkid -s UUID -o value /dev/mapper/root
      register: root_uuid
      changed_when: false

    - name: Setup initramfs
      tags: [ grub ]
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt filesystems fsck)

        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux

    - name: Setup grub
      tags: [ grub ]
      block:
        # @TODO: initrd (intel/amd)-ucode
        # https://wiki.archlinux.org/title/microcode

        - name: Add commandline information to grub config
          lineinfile:
            dest: /mnt/etc/default/grub
            regexp: ^GRUB_CMDLINE_LINUX=
            line: GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ luks_uuid.stdout }}:root root=/dev/mapper/root"

        - name: Install grub
          command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

        - name: Create grub config
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    - name: Notify
      tags: [ grub ]
      command: wall Grub installed

    - name: Setup user account
      tags: [ user ]
      block:
        #region Useful when debugging in VM without doing the full reinstall
        - name: Check if user exists
          ignore_errors: True
          register: result
          command: arch-chroot /mnt getent passwd oxodao > /dev/null
          when: inventory_hostname == 'vm'

        - name: Delete old user account
          command: arch-chroot /mnt userdel {{ username }}
          when: inventory_hostname == 'vm' and result.rc != 2
        #endregion

        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ username }} --password {{ lookup('file', 'passwords/password') }}

        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ username }}/.ssh
            state: directory

        - name: Set mode, owner, and group on user's ssh directory
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ username }}/.ssh
            - chown {{ username }}:{{ username }} /home/{{ username }}/.ssh

        - name: Copy over ssh key from current Ansible controller as an authorized key
          copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/{{ ssh_key_filename }}'
            dest: /mnt/home/{{ username }}/.ssh/authorized_keys

        - name: Set mode, owner, and group on user's authorized_key file
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ username }}/.ssh/authorized_keys
            - chown {{ username }}:{{ username }} /home/{{ username }}/.ssh/authorized_keys

        - name: Give passwordless sudo access to wheel group
          copy:
            content: '%wheel ALL=(ALL) NOPASSWD: ALL'
            dest: /mnt/etc/sudoers.d/wheel
            validate: /usr/sbin/visudo --check --file=%s

    - name: Notify
      tags: [ user ]
      command: wall User account created