---
- hosts: all
  become: yes
  tags: [ install ]

  tasks:
    - name: Run pacstrap
      command: pacstrap /mnt base base-devel dhclient dhcpcd efibootmgr grub linux linux-firmware lvm2 netctl openssh python reflector sudo

    - name: Restrict reflector to only FR mirrors
      ansible.builtin.lineinfile:
        insertafter: \# --country
        line: --country "France"
        path: /mnt/etc/xdg/reflector/reflector.conf

    - name: Generate fstab
      block:
        - name: Generate blank fstab
          command: genfstab -U /mnt >> /mnt/etc/fstab

        - name: Add root volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            opts: defaults
            passno: '1'
            state: present

        - name: Add boot volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            opts: defaults
            passno: '2'
            state: present

        - name: Add tmp volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /tmp
            src: /dev/mapper/tmp
            fstype: tmpfs
            opts: defaults
            state: present

    - name: Add tmp volume to crypttab
      crypttab:
        path: /mnt/etc/crypttab
        backing_device: /dev/VolumeGroup00/tmp
        name: tmp
        password: /dev/urandom
        opts: tmp,cipher=aes-xts-plain64,size=512
        state: present

    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime

    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc

    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
            - {regex: fr_FR\.UTF-8 UTF-8, line: fr_FR.UTF-8 UTF-8}

        - name: Create locale.conf
          copy:
            content: "LANG=fr_FR.UTF-8"
            dest: /mnt/etc/locale.conf

        - name: Generate locales
          command: arch-chroot /mnt locale-gen

    - name: Set hostname
      copy:
        content: '{{ inventory_hostname }}'
        dest: /mnt/etc/hostname

    - name: Set console keymap
      copy:
        content: 'KEYMAP=fr-pc'
        dest: /mnt/etc/vconsole.conf

    - name: Setup netctl
      block:
        - name: Create netctl profile for wired connection
          copy:
            content: |
              Description='Wired with DHCP'
              Interface={{ wired_interface }}
              Connection=ethernet
              IP=dhcp
              IP6=dhcp-noaddr
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
              ExecUpPost='/usr/bin/ip link set {{ wired_interface }} mtu 1480'
            dest: /mnt/etc/netctl/wired

        - name: Enable wired netctl profile
          command: arch-chroot /mnt netctl enable wired

    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd

    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)

        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux

    - name: Set up grub
      block:
        - name: Add commandline information to grub config
          lineinfile:
            dest: /mnt/etc/default/grub
            regexp: ^GRUB_CMDLINE_LINUX=
            line: GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ root_luks_uuid.stdout }}:root root=/dev/mapper/root"

        - name: Install grub
          command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

        - name: Create grub config
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    - name: Setup user account
      block:
        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ lookup('file', 'files/password') }}

        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ user_name }}/.ssh
            state: directory

        - name: Set mode, owner, and group on user's ssh directory
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ user_name }}/.ssh
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh

        - name: Copy over ssh key from current Ansible controller as an authorized key
          copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/id_ed25519.pub'
            dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys

        - name: Set mode, owner, and group on user's authorized_key file
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys

        - name: Give passwordless sudo access to wheel group
          copy:
            content: '%wheel ALL=(ALL) NOPASSWD: ALL'
            dest: /mnt/etc/sudoers.d/wheel
            validate: /usr/sbin/visudo --check --file=%s

    - name: Install and enable bolt
      block:
        - name: Install bolt
          ansible.builtin.command: arch-chroot /mnt pacman --sync --noconfirm bolt
        - name: Enable bolt service
          ansible.builtin.command: arch-chroot /mnt systemctl enable bolt.service

    - name: Reboot
      reboot:
        connect_timeout: 1
        reboot_timeout: 1
      failed_when: false
